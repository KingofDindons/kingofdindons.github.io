{"version":3,"sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.ts","./src/app/login/login.page.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEd;AAEzC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kDAAS;KACrB;CACF,CAAC;IAMW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAJlC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;AChBM;AACM;AACF;AAEA;AAEmB;AAEvB;AAEgD;AAC1C;IAclC,eAAe,SAAf,eAAe;CAAG;AAAlB,eAAe;IAX3B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,yEAAsB;YACtB,mGAAsB;YACtB,yDAAY;SACb;QACD,YAAY,EAAE,CAAC,kDAAS,CAAC;KAC1B,CAAC;GACW,eAAe,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACzBc;AAED;AAEU;AACG;AAEtD;;GAEG;IAIU,SAAS,SAAT,SAAS;IAapB,YAAoB,KAAmB,EAAU,IAAiB,EAAU,MAAc;QAAtE,UAAK,GAAL,KAAK,CAAc;QAAU,SAAI,GAAJ,IAAI,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QACxF,IAAI,CAAC,WAAW,GAAG;YACjB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,SAAS;SACpB,CAAC;IAEJ,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,IAAY;QACnB,6CAA6C;QAC7C,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QAED,iCAAiC;QACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAIxB,iDAAiD;QACjD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;YAC3C,IAAI,EAAE,GAAG,EAAE;gBACT,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;gBAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM;YAC/C,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,0BAA0B,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YACxD,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;;YAvDQ,8DAAY;YADZ,2DAAW;YAFX,mDAAM;;AAWF,SAAS;IAHrB,wDAAS,CAAC;QACT,0EAA8B;KAC/B,CAAC;GACW,SAAS,CA+CrB;AA/CqB;;;;;;;;;;;;;;;;ACbtB,iEAAe,+vFAA+vF,E","file":"src_app_login_login_module_ts.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nimport { CustomComponentsModule } from '@app/custom-components/custom-components.module';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule,\r\n    CustomComponentsModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [LoginPage]\r\n})\r\nexport class LoginPageModule {}\r\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthRequest } from \"../../models/auth-request\";\r\nimport { AuthService } from \"../auth/auth.service\";\r\nimport { StoreService } from \"../store/store.service\";\r\n\r\n/**\r\n * Login page.\r\n */\r\n@Component({\r\n  templateUrl: \"login.page.html\",\r\n})\r\nexport class LoginPage {\r\n  /**\r\n   * This authentication request object will be updated when the user\r\n   * edits the login form. It will then be sent to the API.\r\n   */\r\n  authRequest: AuthRequest;\r\n\r\n  /**\r\n   * If true, it means that the authentication API has return a failed response\r\n   * (probably because the name or password is incorrect).\r\n   */\r\n  loginError: boolean;\r\n\r\n  constructor(private store: StoreService, private auth: AuthService, private router: Router) {\r\n    this.authRequest = {\r\n      pseudo: undefined,\r\n      password: undefined,\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Called when the login form is submitted.\r\n   */\r\n  onSubmit(form: NgForm) {\r\n    // Do not do anything if the form is invalid.\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    // Hide any previous login error.\r\n    this.loginError = false;\r\n\r\n   \r\n\r\n    // Perform the authentication request to the API.\r\n    this.auth.logIn$(this.authRequest).subscribe({\r\n      next: () => {\r\n        this.router.navigateByUrl(\"/home\")\r\n        this.store.username = this.authRequest.pseudo\r\n      },\r\n      error: (err) => {\r\n        this.loginError = true;\r\n        console.warn(`Authentication failed: ${err.message}`);\r\n      },\r\n    });\r\n  }\r\n}\r\n","export default \"\\r\\n\\r\\n\\r\\n\\r\\n<ion-content [fullscreen]=\\\"true\\\" class=\\\"background-image\\\" padding>\\r\\n\\r\\n  <ion-img  id=\\\"logotext\\\" src=\\\"../../assets/text-images/logo-text.png\\\"></ion-img>\\r\\n\\r\\n  <app-page-title title=\\\"Se connecter\\\" backUrl=\\\"/start\\\"></app-page-title>\\r\\n\\r\\n  <form #loginForm=\\\"ngForm\\\" (submit)=\\\"onSubmit(loginForm)\\\">\\r\\n    <ion-list>\\r\\n      <!-- Username input -->\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Username</ion-label>\\r\\n        <ion-input\\r\\n          inputmode=\\\"text\\\"\\r\\n          #pseudo=\\\"ngModel\\\"\\r\\n          required=\\\"true\\\"\\r\\n          name=\\\"pseudo\\\"\\r\\n          [(ngModel)]=\\\"authRequest.pseudo\\\"\\r\\n        ></ion-input>\\r\\n      </ion-item>\\r\\n  \\r\\n      <!-- Error message displayed if the username is invalid -->\\r\\n      <ion-item lines=\\\"none\\\" *ngIf=\\\"pseudo.invalid && pseudo.touched\\\">\\r\\n        <ion-text color=\\\"danger\\\">Username is required.</ion-text>\\r\\n      </ion-item>\\r\\n  \\r\\n      <!-- Password input -->\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n        <ion-input\\r\\n          inputmode=\\\"text\\\"\\r\\n          #password=\\\"ngModel\\\"\\r\\n          required=\\\"true\\\"\\r\\n          type=\\\"password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          [(ngModel)]=\\\"authRequest.password\\\"\\r\\n        ></ion-input>\\r\\n      </ion-item>\\r\\n  \\r\\n      <!-- Error message displayed if the password is invalid -->\\r\\n      <ion-item lines=\\\"none\\\" *ngIf=\\\"password.invalid && password.touched\\\">\\r\\n        <ion-text color=\\\"danger\\\">Password is required.</ion-text>\\r\\n      </ion-item>\\r\\n    </ion-list>\\r\\n  \\r\\n    <div class=\\\"ion-padding\\\">\\r\\n      <ion-button type=\\\"submit\\\" expand=\\\"block\\\">Connexion</ion-button>\\r\\n    \\r\\n      <!-- Error message displayed if the login failed -->\\r\\n      <ion-text color=\\\"danger\\\" *ngIf=\\\"loginError\\\"\\r\\n        >Username or password is invalid.</ion-text\\r\\n      ><br>\\r\\n      <a routerLink=\\\"/register\\\">Créer un compte</a>\\r\\n  \\r\\n    </div>\\r\\n  </form>\\r\\n\\r\\n\\r\\n<!-- <form (submit)=\\\"login()\\\">\\r\\n  <ion-card>\\r\\n    <ion-card-content>\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"stacked\\\" autofocus >Pseudonyme</ion-label>\\r\\n        <ion-input name=\\\"pseudo\\\"  required maxlength=12 minlength=4  [(ngModel)]=\\\"authRequest.pseudo\\\"></ion-input>\\r\\n      </ion-item>\\r\\n\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"stacked\\\" >Mot de passe</ion-label>\\r\\n        <ion-input name=\\\"password\\\" required type=\\\"password\\\"  [(ngModel)]=\\\"authRequest.password\\\"></ion-input>\\r\\n      </ion-item>\\r\\n\\r\\n      <ion-button type=\\\"submit\\\" expand=\\\"block\\\">Connexion</ion-button>\\r\\n      <a routerLink=\\\"/register\\\">Créer un compte</a>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n</form> -->\\r\\n\\r\\n</ion-content>\\r\\n\";"],"sourceRoot":"webpack:///"}